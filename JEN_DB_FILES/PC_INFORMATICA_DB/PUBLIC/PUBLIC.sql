create or replace schema PUBLIC;

create or replace TABLE ADWKS_SD_ADDRESS (
	ADDRESSID NUMBER(38,0) NOT NULL,
	ADDRESSLINE1 VARCHAR(240),
	ADDRESSLINE2 VARCHAR(240),
	CITY VARCHAR(120),
	STATEPROVINCEID NUMBER(38,0),
	POSTALCODE VARCHAR(60),
	SPATIALLOCATION BINARY(8388608),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_ADDRESSTYPE (
	ADDRESSTYPEID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_BUSINESSENTITY (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_BUSINESSENTITYADDRESS (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	ADDRESSID NUMBER(38,0) NOT NULL,
	ADDRESSTYPEID NUMBER(38,0) NOT NULL,
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_BUSINESSENTITYCONTACT (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	PERSONID NUMBER(38,0) NOT NULL,
	CONTACTTYPEID NUMBER(38,0) NOT NULL,
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_BUSINESSENTITY_LOG (
	OP_XID VARCHAR(100),
	OP_CODE VARCHAR(1),
	OP_CMT_SCN NUMBER(20,0),
	OP_CMT_TIME TIMESTAMP_NTZ(9),
	OP_NUM_IN_TX NUMBER(20,0),
	OP_KEY_LEVEL NUMBER(6,0),
	OP_ROOT_KEY_ROWID VARCHAR(100),
	OPERATION_OWNER VARCHAR(100),
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID_NEW NUMBER(38,0),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID_NEW VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE_NEW TIMESTAMP_NTZ(3)
);
create or replace TABLE ADWKS_SD_CONTACTTYPE (
	CONTACTTYPEID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_COUNTRYREGION (
	COUNTRYREGIONCODE VARCHAR(12) NOT NULL,
	NAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_EMAILADDRESS (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	EMAILADDRESSID NUMBER(38,0) NOT NULL,
	EMAILADDRESS VARCHAR(2000),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	TEST_NEW_COLUMN2 NUMBER(38,0),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_EMAILADDRESS_LOG (
	OP_XID VARCHAR(100),
	OP_CODE VARCHAR(1),
	OP_CMT_SCN NUMBER(20,0),
	OP_CMT_TIME TIMESTAMP_NTZ(9),
	OP_NUM_IN_TX NUMBER(20,0),
	OP_KEY_LEVEL NUMBER(6,0),
	OP_ROOT_KEY_ROWID VARCHAR(100),
	OPERATION_OWNER VARCHAR(100),
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID_NEW NUMBER(38,0),
	EMAILADDRESSID_OLD NUMBER(38,0),
	EMAILADDRESSID_NEW NUMBER(38,0),
	EMAILADDRESS_OLD VARCHAR(2000),
	EMAILADDRESS_NEW VARCHAR(2000),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID_NEW VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE_NEW TIMESTAMP_NTZ(3),
	TEST_NEW_COLUMN2_OLD NUMBER(38,0),
	TEST_NEW_COLUMN2_NEW NUMBER(38,0)
);
create or replace TABLE ADWKS_SD_MYNEWTABLE (
	ID NUMBER(38,0) NOT NULL,
	DESCRIPTION VARCHAR(100),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_PASSWORD (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	PASSWORDHASH VARCHAR(128),
	PASSWORDSALT VARCHAR(10),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_PERSON (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	PERSONTYPE VARCHAR(8),
	NAMESTYLE BOOLEAN,
	TITLE VARCHAR(64),
	FIRSTNAME VARCHAR(200),
	MIDDLENAME VARCHAR(200),
	LASTNAME VARCHAR(200),
	SUFFIX VARCHAR(40),
	EMAILPROMOTION NUMBER(38,0),
	ADDITIONALCONTACTINFO VARCHAR(16777216) COLLATE 'utf8',
	DEMOGRAPHICS VARCHAR(16777216) COLLATE 'utf8',
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_PERSONPHONE (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	PHONENUMBER VARCHAR(100) NOT NULL,
	PHONENUMBERTYPEID NUMBER(38,0) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE ADWKS_SD_PERSON_LOG (
	OP_XID VARCHAR(100),
	OP_CODE VARCHAR(1),
	OP_CMT_SCN NUMBER(20,0),
	OP_CMT_TIME TIMESTAMP_NTZ(9),
	OP_NUM_IN_TX NUMBER(20,0),
	OP_KEY_LEVEL NUMBER(6,0),
	OP_ROOT_KEY_ROWID VARCHAR(100),
	OPERATION_OWNER VARCHAR(100),
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID_NEW NUMBER(38,0),
	PERSONTYPE_OLD VARCHAR(8),
	PERSONTYPE_NEW VARCHAR(8),
	NAMESTYLE_OLD BOOLEAN,
	NAMESTYLE_NEW BOOLEAN,
	TITLE_OLD VARCHAR(64),
	TITLE_NEW VARCHAR(64),
	FIRSTNAME_OLD VARCHAR(200),
	FIRSTNAME_NEW VARCHAR(200),
	MIDDLENAME_OLD VARCHAR(200),
	MIDDLENAME_NEW VARCHAR(200),
	LASTNAME_OLD VARCHAR(200),
	LASTNAME_NEW VARCHAR(200),
	SUFFIX_OLD VARCHAR(40),
	SUFFIX_NEW VARCHAR(40),
	EMAILPROMOTION_OLD NUMBER(38,0),
	EMAILPROMOTION_NEW NUMBER(38,0),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID_NEW VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE_NEW TIMESTAMP_NTZ(3)
);
create or replace TABLE CRIMSON_WPPHILANTHROPICGIFTCATEGORY (
	ID VARCHAR(36) NOT NULL,
	WPPHILANTHROPICGIFTID VARCHAR(36),
	PHILANTHROPICGIFTCATEGORYID VARCHAR(36),
	ADDEDBYID VARCHAR(36),
	CHANGEDBYID VARCHAR(36),
	DATEADDED TIMESTAMP_NTZ(3),
	DATECHANGED TIMESTAMP_NTZ(3),
	TS BINARY(8),
	SEQUENCE NUMBER(38,0),
	constraint PK_CRIMSON_WPPHILANTHROPICGIFTCATEGORY_PK_WPPHILANTHROPICGIFTCATEGORY primary key (ID)
);
create or replace dynamic table DYNAMIC_CUSTOMER_SALES(
	PERSONID,
	CUSTOMERID,
	FIRSTNAME,
	LASTNAME,
	TOTAL,
	TOTAL_PURCHASED_VISITS
) lag = '5 minutes' warehouse = TEST_GROUP_1_WH
 as Select  c.PersonID , c.customerid, p.FirstName , p.LastName , sum(soh.TotalDue) as Total, count(*) as Total_Purchased_visits
From DYNAMIC_SALES_CUSTOMER c
inner join DYNAMIC_SD_PERSON p on c.PersonID = p.BusinessEntityID 
inner join DYNAMIC_SALES_SALESORDERHEADER soh on soh.CustomerID = c.CustomerID 
GROUP BY /*ROLLUP*/  c.PersonID, c.customerid, p.FirstName , p.LastName;
create or replace dynamic table DYNAMIC_FROM_VIEW_CUSTOMER_SALES(
	PERSONID,
	CUSTOMERID,
	FIRSTNAME,
	LASTNAME,
	TOTAL,
	TOTAL_PURCHASED_VISITS
) lag = '1 minute' warehouse = COMPUTE_WH
 as Select  c.PersonID , c.customerid, c.FirstName , c.LastName , c.Total, c.Total_Purchased_visits
From PC_INFORMATICA_DB.PUBLIC.VIEW_CUSTOMER_SALES c;
create or replace dynamic table DYNAMIC_SALES_CUSTOMER(
	HEXID,
	CUSTOMERID,
	PERSONID,
	STOREID,
	TERRITORYID,
	ROWGUID,
	MODIFIEDDATE
) lag = '2 minutes' warehouse = TEST_GROUP_1_WH
 as
SELECT MD5(CUSTOMERID) as HEXID, CUSTOMERID, PERSONID, STOREID, TERRITORYID, ROWGUID, MODIFIEDDATE
FROM PC_INFORMATICA_DB.PUBLIC.SALES_CUSTOMER;
create or replace dynamic table DYNAMIC_SALES_SALESORDERHEADER(
	HEXID,
	SALESORDERID,
	REVISIONNUMBER,
	ORDERDATE,
	DUEDATE,
	SHIPDATE,
	STATUS,
	ONLINEORDERFLAG,
	PURCHASEORDERNUMBER,
	ACCOUNTNUMBER,
	CUSTOMERID,
	SALESPERSONID,
	TERRITORYID,
	BILLTOADDRESSID,
	SHIPTOADDRESSID,
	SHIPMETHODID,
	CREDITCARDID,
	CREDITCARDAPPROVALCODE,
	CURRENCYRATEID,
	SUBTOTAL,
	TAXAMT,
	FREIGHT,
	COMMENT,
	ROWGUID,
	MODIFIEDDATE,
	TOTALDUE
) lag = '2 minutes' warehouse = TEST_GROUP_1_WH
 as
SELECT MD5(SALESORDERID) as HEXID, SALESORDERID, REVISIONNUMBER, ORDERDATE, DUEDATE, SHIPDATE, STATUS, ONLINEORDERFLAG, PURCHASEORDERNUMBER, ACCOUNTNUMBER, CUSTOMERID, SALESPERSONID, TERRITORYID, BILLTOADDRESSID, SHIPTOADDRESSID, SHIPMETHODID, CREDITCARDID, CREDITCARDAPPROVALCODE, CURRENCYRATEID, SUBTOTAL, TAXAMT, FREIGHT, COMMENT, ROWGUID, MODIFIEDDATE,
(IFNULL(SubTotal,0) + IFNULL(TaxAmt,0) + IFNULL(Freight,0)) as TotalDue
FROM PC_INFORMATICA_DB.PUBLIC.SALES_SALESORDERHEADER;
create or replace dynamic table DYNAMIC_SD_PERSON(
	HEXID,
	RANDOMVAR,
	BUSINESSENTITYID,
	PERSONTYPE,
	NAMESTYLE,
	TITLE,
	FIRSTNAME,
	MIDDLENAME,
	LASTNAME,
	SUFFIX,
	EMAILPROMOTION,
	ADDITIONALCONTACTINFO,
	DEMOGRAPHICS,
	ROWGUID,
	MODIFIEDDATE,
	SYS_OPERATION_TYPE,
	SYS_OPERATION_TIME,
	SYS_OPERATION_OWNER,
	SYS_TRANSACTION_ID
) lag = '2 minutes' warehouse = TEST_GROUP_1_WH
 as
SELECT MD5(src.ROWGUID) as HEXID
    ,  EMAILPROMOTION + 1 as RANDOMVAR,
    BUSINESSENTITYID, PERSONTYPE, NAMESTYLE, TITLE, FIRSTNAME, MIDDLENAME, LASTNAME, SUFFIX, EMAILPROMOTION, ADDITIONALCONTACTINFO, DEMOGRAPHICS, ROWGUID, MODIFIEDDATE, SYS_OPERATION_TYPE, SYS_OPERATION_TIME, SYS_OPERATION_OWNER, SYS_TRANSACTION_ID
    FROM PC_INFORMATICA_DB.PUBLIC.ADWKS_SD_PERSON src;
create or replace dynamic table DYNAMIC_VIEW_CUSTOMER_SALES(
	PERSONID,
	CUSTOMERID,
	FIRSTNAME,
	LASTNAME,
	TOTAL,
	TOTAL_PURCHASED_VISITS
) lag = '5 minutes' warehouse = COMPUTE_WH
 as Select  c.PersonID , c.customerid, p.FirstName , p.LastName , sum(soh.TotalDue) as Total, count(*) as Total_Purchased_visits
From VIEW_SALES_CUSTOMER c
inner join VIEW_SD_PERSON p on c.PersonID = p.BusinessEntityID 
inner join VIEW_SALES_SALESORDERHEADER soh on soh.CustomerID = c.CustomerID 
GROUP BY /*ROLLUP*/  c.PersonID, c.customerid, p.FirstName , p.LastName;
create or replace TABLE FINAL_SD_PERSON (
	HEXID VARCHAR(32),
	RANDOMVAR NUMBER(38,0),
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	PERSONTYPE VARCHAR(8),
	NAMESTYLE BOOLEAN,
	TITLE VARCHAR(32),
	FIRSTNAME VARCHAR(200),
	MIDDLENAME VARCHAR(200),
	LASTNAME VARCHAR(200),
	SUFFIX VARCHAR(40),
	EMAILPROMOTION NUMBER(38,0),
	ADDITIONALCONTACTINFO VARCHAR(16777216) COLLATE 'utf8',
	DEMOGRAPHICS VARCHAR(16777216) COLLATE 'utf8',
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	SYS_OPERATION_TYPE VARCHAR(1),
	SYS_OPERATION_TIME TIMESTAMP_NTZ(9),
	SYS_OPERATION_OWNER VARCHAR(256),
	SYS_TRANSACTION_ID VARCHAR(100)
);
create or replace TABLE INFORMATICA_CDC_RECOVERY (
	TASK_ID VARCHAR(1024) NOT NULL,
	TYPE VARCHAR(128) NOT NULL,
	SCHEMA_NAME VARCHAR(512) NOT NULL,
	TABLE_NAME VARCHAR(512) NOT NULL,
	CYCLE_NUMBER NUMBER(38,0),
	SEQUENCE VARCHAR(2048),
	primary key (TASK_ID, TYPE, SCHEMA_NAME, TABLE_NAME)
);
create or replace TABLE INFO_ADDRESS (
	ADDRESSID_OLD NUMBER(38,0),
	ADDRESSID NUMBER(38,0),
	ADDRESSLINE1_OLD VARCHAR(240),
	ADDRESSLINE1 VARCHAR(240),
	ADDRESSLINE2_OLD VARCHAR(240),
	ADDRESSLINE2 VARCHAR(240),
	CITY_OLD VARCHAR(120),
	CITY VARCHAR(120),
	STATEPROVINCEID_OLD NUMBER(38,0),
	STATEPROVINCEID NUMBER(38,0),
	POSTALCODE_OLD VARCHAR(60),
	POSTALCODE VARCHAR(60),
	SPATIALLOCATION_OLD BINARY(8388608),
	SPATIALLOCATION BINARY(8388608),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_ADDRESSTYPE (
	ADDRESSTYPEID_OLD NUMBER(38,0),
	ADDRESSTYPEID NUMBER(38,0),
	NAME_OLD VARCHAR(200),
	NAME VARCHAR(200),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_BUSINESSENTITY (
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID NUMBER(38,0),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_BUSINESSENTITYADDRESS (
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID NUMBER(38,0),
	ADDRESSID_OLD NUMBER(38,0),
	ADDRESSID NUMBER(38,0),
	ADDRESSTYPEID_OLD NUMBER(38,0),
	ADDRESSTYPEID NUMBER(38,0),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_BUSINESSENTITYCONTACT (
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID NUMBER(38,0),
	PERSONID_OLD NUMBER(38,0),
	PERSONID NUMBER(38,0),
	CONTACTTYPEID_OLD NUMBER(38,0),
	CONTACTTYPEID NUMBER(38,0),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_CONTACTTYPE (
	CONTACTTYPEID_OLD NUMBER(38,0),
	CONTACTTYPEID NUMBER(38,0),
	NAME_OLD VARCHAR(200),
	NAME VARCHAR(200),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_COUNTRYREGION (
	COUNTRYREGIONCODE_OLD VARCHAR(12),
	COUNTRYREGIONCODE VARCHAR(12),
	NAME_OLD VARCHAR(200),
	NAME VARCHAR(200),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace TABLE INFO_EMAILADDRESS (
	BUSINESSENTITYID_OLD NUMBER(38,0),
	BUSINESSENTITYID NUMBER(38,0),
	EMAILADDRESSID_OLD NUMBER(38,0),
	EMAILADDRESSID NUMBER(38,0),
	EMAILADDRESS_OLD VARCHAR(2000),
	EMAILADDRESS VARCHAR(2000),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	TEST_NEW_COLUMN2_OLD NUMBER(38,0),
	TEST_NEW_COLUMN2 NUMBER(38,0),
	INFA_OPERATION_TYPE VARCHAR(1),
	INFA_OPERATION_TIME TIMESTAMP_NTZ(9),
	INFA_OPERATION_OWNER VARCHAR(256),
	INFA_TRANSACTION_ID VARCHAR(100),
	INFA_OPERATION_SEQUENCE NUMBER(20,0)
);
create or replace materialized view MVIEW_SALES_CUSTOMER(
	HEXID,
	CUSTOMERID,
	PERSONID,
	STOREID,
	TERRITORYID,
	ROWGUID,
	MODIFIEDDATE
) as
SELECT MD5(CUSTOMERID) as HEXID, CUSTOMERID, PERSONID, STOREID, TERRITORYID, ROWGUID, MODIFIEDDATE
FROM PC_INFORMATICA_DB.PUBLIC.SALES_CUSTOMER;
create or replace materialized view MVIEW_SALES_SALESORDERHEADER(
	HEXID,
	SALESORDERID,
	REVISIONNUMBER,
	ORDERDATE,
	DUEDATE,
	SHIPDATE,
	STATUS,
	ONLINEORDERFLAG,
	PURCHASEORDERNUMBER,
	ACCOUNTNUMBER,
	CUSTOMERID,
	SALESPERSONID,
	TERRITORYID,
	BILLTOADDRESSID,
	SHIPTOADDRESSID,
	SHIPMETHODID,
	CREDITCARDID,
	CREDITCARDAPPROVALCODE,
	CURRENCYRATEID,
	SUBTOTAL,
	TAXAMT,
	FREIGHT,
	COMMENT,
	ROWGUID,
	MODIFIEDDATE,
	TOTALDUE
) as
SELECT MD5(SALESORDERID) as HEXID, SALESORDERID, REVISIONNUMBER, ORDERDATE, DUEDATE, SHIPDATE, STATUS, ONLINEORDERFLAG, PURCHASEORDERNUMBER, ACCOUNTNUMBER, CUSTOMERID, SALESPERSONID, TERRITORYID, BILLTOADDRESSID, SHIPTOADDRESSID, SHIPMETHODID, CREDITCARDID, CREDITCARDAPPROVALCODE, CURRENCYRATEID, SUBTOTAL, TAXAMT, FREIGHT, COMMENT, ROWGUID, MODIFIEDDATE,
(IFNULL(SubTotal,0) + IFNULL(TaxAmt,0) + IFNULL(Freight,0)) as TotalDue
FROM PC_INFORMATICA_DB.PUBLIC.SALES_SALESORDERHEADER;
create or replace materialized view MVIEW_SD_PERSON(
	HEXID,
	RANDOMVAR,
	BUSINESSENTITYID,
	PERSONTYPE,
	NAMESTYLE,
	TITLE,
	FIRSTNAME,
	MIDDLENAME,
	LASTNAME,
	SUFFIX,
	EMAILPROMOTION,
	ADDITIONALCONTACTINFO,
	DEMOGRAPHICS,
	ROWGUID,
	MODIFIEDDATE,
	SYS_OPERATION_TYPE,
	SYS_OPERATION_TIME,
	SYS_OPERATION_OWNER,
	SYS_TRANSACTION_ID
) as
SELECT MD5(src.ROWGUID) as HEXID
    ,  EMAILPROMOTION + 1 as RANDOMVAR,
    BUSINESSENTITYID, PERSONTYPE, NAMESTYLE, TITLE, FIRSTNAME, MIDDLENAME, LASTNAME, SUFFIX, EMAILPROMOTION, ADDITIONALCONTACTINFO, DEMOGRAPHICS, ROWGUID, MODIFIEDDATE, SYS_OPERATION_TYPE, SYS_OPERATION_TIME, SYS_OPERATION_OWNER, SYS_TRANSACTION_ID
    FROM PC_INFORMATICA_DB.PUBLIC.ADWKS_SD_PERSON src;
create or replace TABLE PRODUCTION_BILLOFMATERIALS (
	BILLOFMATERIALSID NUMBER(38,0) NOT NULL,
	PRODUCTASSEMBLYID NUMBER(38,0),
	COMPONENTID NUMBER(38,0),
	STARTDATE TIMESTAMP_NTZ(3),
	ENDDATE TIMESTAMP_NTZ(3),
	UNITMEASURECODE VARCHAR(12),
	BOMLEVEL NUMBER(38,0),
	PERASSEMBLYQTY NUMBER(8,2),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_BILLOFMATERIALS_PK_BILLOFMATERIALS_BILLOFMATERIALSID primary key (BILLOFMATERIALSID)
);
create or replace TABLE PRODUCTION_CULTURE (
	CULTUREID VARCHAR(24) NOT NULL,
	NAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_CULTURE_PK_CULTURE_CULTUREID primary key (CULTUREID)
);
create or replace TABLE PRODUCTION_DOCUMENT (
	DOCUMENTNODE BINARY(892) NOT NULL,
	TITLE VARCHAR(200),
	OWNER NUMBER(38,0),
	FOLDERFLAG BOOLEAN,
	FILENAME VARCHAR(1600),
	FILEEXTENSION VARCHAR(32),
	REVISION VARCHAR(20),
	CHANGENUMBER NUMBER(38,0),
	STATUS NUMBER(38,0),
	DOCUMENTSUMMARY VARCHAR(16777216) COLLATE 'utf8',
	DOCUMENT BINARY(8388608),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_DOCUMENT_PK_DOCUMENT_DOCUMENTNODE primary key (DOCUMENTNODE)
);
create or replace TABLE PRODUCTION_ILLUSTRATION (
	ILLUSTRATIONID NUMBER(38,0) NOT NULL,
	DIAGRAM VARCHAR(16777216) COLLATE 'utf8',
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_ILLUSTRATION_PK_ILLUSTRATION_ILLUSTRATIONID primary key (ILLUSTRATIONID)
);
create or replace TABLE PRODUCTION_LOCATION (
	LOCATIONID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	COSTRATE NUMBER(10,4),
	AVAILABILITY NUMBER(8,2),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_LOCATION_PK_LOCATION_LOCATIONID primary key (LOCATIONID)
);
create or replace TABLE PRODUCTION_PRODUCT (
	PRODUCTID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	PRODUCTNUMBER VARCHAR(100),
	MAKEFLAG BOOLEAN,
	FINISHEDGOODSFLAG BOOLEAN,
	COLOR VARCHAR(60),
	SAFETYSTOCKLEVEL NUMBER(38,0),
	REORDERPOINT NUMBER(38,0),
	STANDARDCOST NUMBER(19,4),
	LISTPRICE NUMBER(19,4),
	SIZE VARCHAR(20),
	SIZEUNITMEASURECODE VARCHAR(12),
	WEIGHTUNITMEASURECODE VARCHAR(12),
	WEIGHT NUMBER(8,2),
	DAYSTOMANUFACTURE NUMBER(38,0),
	PRODUCTLINE VARCHAR(8),
	CLASS VARCHAR(8),
	STYLE VARCHAR(8),
	PRODUCTSUBCATEGORYID NUMBER(38,0),
	PRODUCTMODELID NUMBER(38,0),
	SELLSTARTDATE TIMESTAMP_NTZ(3),
	SELLENDDATE TIMESTAMP_NTZ(3),
	DISCONTINUEDDATE TIMESTAMP_NTZ(3),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCT_PK_PRODUCT_PRODUCTID primary key (PRODUCTID)
);
create or replace TABLE PRODUCTION_PRODUCTCATEGORY (
	PRODUCTCATEGORYID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTCATEGORY_PK_PRODUCTCATEGORY_PRODUCTCATEGORYID primary key (PRODUCTCATEGORYID)
);
create or replace TABLE PRODUCTION_PRODUCTCOSTHISTORY (
	PRODUCTID NUMBER(38,0) NOT NULL,
	STARTDATE TIMESTAMP_NTZ(3) NOT NULL,
	ENDDATE TIMESTAMP_NTZ(3),
	STANDARDCOST NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTCOSTHISTORY_PK_PRODUCTCOSTHISTORY_PRODUCTID_STARTDATE primary key (PRODUCTID, STARTDATE)
);
create or replace TABLE PRODUCTION_PRODUCTDESCRIPTION (
	PRODUCTDESCRIPTIONID NUMBER(38,0) NOT NULL,
	DESCRIPTION VARCHAR(1600),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTDESCRIPTION_PK_PRODUCTDESCRIPTION_PRODUCTDESCRIPTIONID primary key (PRODUCTDESCRIPTIONID)
);
create or replace TABLE PRODUCTION_PRODUCTDOCUMENT (
	PRODUCTID NUMBER(38,0) NOT NULL,
	DOCUMENTNODE BINARY(892) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTDOCUMENT_PK_PRODUCTDOCUMENT_PRODUCTID_DOCUMENTNODE primary key (DOCUMENTNODE, PRODUCTID)
);
create or replace TABLE PRODUCTION_PRODUCTINVENTORY (
	PRODUCTID NUMBER(38,0) NOT NULL,
	LOCATIONID NUMBER(38,0) NOT NULL,
	SHELF VARCHAR(40),
	BIN NUMBER(38,0),
	QUANTITY NUMBER(38,0),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTINVENTORY_PK_PRODUCTINVENTORY_PRODUCTID_LOCATIONID primary key (LOCATIONID, PRODUCTID)
);
create or replace TABLE PRODUCTION_PRODUCTLISTPRICEHISTORY (
	PRODUCTID NUMBER(38,0) NOT NULL,
	STARTDATE TIMESTAMP_NTZ(3) NOT NULL,
	ENDDATE TIMESTAMP_NTZ(3),
	LISTPRICE NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTLISTPRICEHISTORY_PK_PRODUCTLISTPRICEHISTORY_PRODUCTID_STARTDATE primary key (PRODUCTID, STARTDATE)
);
create or replace TABLE PRODUCTION_PRODUCTMODEL (
	PRODUCTMODELID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	CATALOGDESCRIPTION VARCHAR(16777216) COLLATE 'utf8',
	INSTRUCTIONS VARCHAR(16777216) COLLATE 'utf8',
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTMODEL_PK_PRODUCTMODEL_PRODUCTMODELID primary key (PRODUCTMODELID)
);
create or replace TABLE PRODUCTION_PRODUCTMODELILLUSTRATION (
	PRODUCTMODELID NUMBER(38,0) NOT NULL,
	ILLUSTRATIONID NUMBER(38,0) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTMODELILLUSTRATION_PK_PRODUCTMODELILLUSTRATION_PRODUCTMODELID_ILLUSTRATIONID primary key (ILLUSTRATIONID, PRODUCTMODELID)
);
create or replace TABLE PRODUCTION_PRODUCTMODELPRODUCTDESCRIPTIONCULTURE (
	PRODUCTMODELID NUMBER(38,0) NOT NULL,
	PRODUCTDESCRIPTIONID NUMBER(38,0) NOT NULL,
	CULTUREID VARCHAR(24) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTMODELPRODUCTDESCRIPTIONCULTURE_PK_PRODUCTMODELPRODUCTDESCRIPTIONCULTURE_PRODUCTMODELID_PRODUCTDESCRIPTIONID_CULTUREID primary key (CULTUREID, PRODUCTDESCRIPTIONID, PRODUCTMODELID)
);
create or replace TABLE PRODUCTION_PRODUCTPHOTO (
	PRODUCTPHOTOID NUMBER(38,0) NOT NULL,
	THUMBNAILPHOTO BINARY(8388608),
	THUMBNAILPHOTOFILENAME VARCHAR(200),
	LARGEPHOTO BINARY(8388608),
	LARGEPHOTOFILENAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTPHOTO_PK_PRODUCTPHOTO_PRODUCTPHOTOID primary key (PRODUCTPHOTOID)
);
create or replace TABLE PRODUCTION_PRODUCTPRODUCTPHOTO (
	PRODUCTID NUMBER(38,0) NOT NULL,
	PRODUCTPHOTOID NUMBER(38,0) NOT NULL,
	PRIMARY BOOLEAN,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTPRODUCTPHOTO_PK_PRODUCTPRODUCTPHOTO_PRODUCTID_PRODUCTPHOTOID primary key (PRODUCTID, PRODUCTPHOTOID)
);
create or replace TABLE PRODUCTION_PRODUCTREVIEW (
	PRODUCTREVIEWID NUMBER(38,0) NOT NULL,
	PRODUCTID NUMBER(38,0),
	REVIEWERNAME VARCHAR(200),
	REVIEWDATE TIMESTAMP_NTZ(3),
	EMAILADDRESS VARCHAR(200),
	RATING NUMBER(38,0),
	COMMENTS VARCHAR(15400),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTREVIEW_PK_PRODUCTREVIEW_PRODUCTREVIEWID primary key (PRODUCTREVIEWID)
);
create or replace TABLE PRODUCTION_PRODUCTSUBCATEGORY (
	PRODUCTSUBCATEGORYID NUMBER(38,0) NOT NULL,
	PRODUCTCATEGORYID NUMBER(38,0),
	NAME VARCHAR(200),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_PRODUCTSUBCATEGORY_PK_PRODUCTSUBCATEGORY_PRODUCTSUBCATEGORYID primary key (PRODUCTSUBCATEGORYID)
);
create or replace TABLE PRODUCTION_SCRAPREASON (
	SCRAPREASONID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_SCRAPREASON_PK_SCRAPREASON_SCRAPREASONID primary key (SCRAPREASONID)
);
create or replace TABLE PRODUCTION_TRANSACTIONHISTORY (
	TRANSACTIONID NUMBER(38,0) NOT NULL,
	PRODUCTID NUMBER(38,0),
	REFERENCEORDERID NUMBER(38,0),
	REFERENCEORDERLINEID NUMBER(38,0),
	TRANSACTIONDATE TIMESTAMP_NTZ(3),
	TRANSACTIONTYPE VARCHAR(4),
	QUANTITY NUMBER(38,0),
	ACTUALCOST NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_TRANSACTIONHISTORY_PK_TRANSACTIONHISTORY_TRANSACTIONID primary key (TRANSACTIONID)
);
create or replace TABLE PRODUCTION_TRANSACTIONHISTORYARCHIVE (
	TRANSACTIONID NUMBER(38,0) NOT NULL,
	PRODUCTID NUMBER(38,0),
	REFERENCEORDERID NUMBER(38,0),
	REFERENCEORDERLINEID NUMBER(38,0),
	TRANSACTIONDATE TIMESTAMP_NTZ(3),
	TRANSACTIONTYPE VARCHAR(4),
	QUANTITY NUMBER(38,0),
	ACTUALCOST NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_TRANSACTIONHISTORYARCHIVE_PK_TRANSACTIONHISTORYARCHIVE_TRANSACTIONID primary key (TRANSACTIONID)
);
create or replace TABLE PRODUCTION_UNITMEASURE (
	UNITMEASURECODE VARCHAR(12) NOT NULL,
	NAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_UNITMEASURE_PK_UNITMEASURE_UNITMEASURECODE primary key (UNITMEASURECODE)
);
create or replace TABLE PRODUCTION_WORKORDER (
	WORKORDERID NUMBER(38,0) NOT NULL,
	PRODUCTID NUMBER(38,0),
	ORDERQTY NUMBER(38,0),
	SCRAPPEDQTY NUMBER(38,0),
	STARTDATE TIMESTAMP_NTZ(3),
	ENDDATE TIMESTAMP_NTZ(3),
	DUEDATE TIMESTAMP_NTZ(3),
	SCRAPREASONID NUMBER(38,0),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_WORKORDER_PK_WORKORDER_WORKORDERID primary key (WORKORDERID)
);
create or replace TABLE PRODUCTION_WORKORDERROUTING (
	WORKORDERID NUMBER(38,0) NOT NULL,
	PRODUCTID NUMBER(38,0) NOT NULL,
	OPERATIONSEQUENCE NUMBER(38,0) NOT NULL,
	LOCATIONID NUMBER(38,0),
	SCHEDULEDSTARTDATE TIMESTAMP_NTZ(3),
	SCHEDULEDENDDATE TIMESTAMP_NTZ(3),
	ACTUALSTARTDATE TIMESTAMP_NTZ(3),
	ACTUALENDDATE TIMESTAMP_NTZ(3),
	ACTUALRESOURCEHRS NUMBER(9,4),
	PLANNEDCOST NUMBER(19,4),
	ACTUALCOST NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PRODUCTION_WORKORDERROUTING_PK_WORKORDERROUTING_WORKORDERID_PRODUCTID_OPERATIONSEQUENCE primary key (OPERATIONSEQUENCE, PRODUCTID, WORKORDERID)
);
create or replace TABLE PURCHASING_PRODUCTVENDOR (
	PRODUCTID NUMBER(38,0) NOT NULL,
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	AVERAGELEADTIME NUMBER(38,0),
	STANDARDPRICE NUMBER(19,4),
	LASTRECEIPTCOST NUMBER(19,4),
	LASTRECEIPTDATE TIMESTAMP_NTZ(3),
	MINORDERQTY NUMBER(38,0),
	MAXORDERQTY NUMBER(38,0),
	ONORDERQTY NUMBER(38,0),
	UNITMEASURECODE VARCHAR(12),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PURCHASING_PRODUCTVENDOR_PK_PRODUCTVENDOR_PRODUCTID_BUSINESSENTITYID primary key (BUSINESSENTITYID, PRODUCTID)
);
create or replace TABLE PURCHASING_PURCHASEORDERDETAIL (
	PURCHASEORDERID NUMBER(38,0) NOT NULL,
	PURCHASEORDERDETAILID NUMBER(38,0) NOT NULL,
	DUEDATE TIMESTAMP_NTZ(3),
	ORDERQTY NUMBER(38,0),
	PRODUCTID NUMBER(38,0),
	UNITPRICE NUMBER(19,4),
	RECEIVEDQTY NUMBER(8,2),
	REJECTEDQTY NUMBER(8,2),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PURCHASING_PURCHASEORDERDETAIL_PK_PURCHASEORDERDETAIL_PURCHASEORDERID_PURCHASEORDERDETAILID primary key (PURCHASEORDERDETAILID, PURCHASEORDERID)
);
create or replace TABLE PURCHASING_PURCHASEORDERHEADER (
	PURCHASEORDERID NUMBER(38,0) NOT NULL,
	REVISIONNUMBER NUMBER(38,0),
	STATUS NUMBER(38,0),
	EMPLOYEEID NUMBER(38,0),
	VENDORID NUMBER(38,0),
	SHIPMETHODID NUMBER(38,0),
	ORDERDATE TIMESTAMP_NTZ(3),
	SHIPDATE TIMESTAMP_NTZ(3),
	SUBTOTAL NUMBER(19,4),
	TAXAMT NUMBER(19,4),
	FREIGHT NUMBER(19,4),
	TOTALDUE NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PURCHASING_PURCHASEORDERHEADER_PK_PURCHASEORDERHEADER_PURCHASEORDERID primary key (PURCHASEORDERID)
);
create or replace TABLE PURCHASING_SHIPMETHOD (
	SHIPMETHODID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	SHIPBASE NUMBER(19,4),
	SHIPRATE NUMBER(19,4),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PURCHASING_SHIPMETHOD_PK_SHIPMETHOD_SHIPMETHODID primary key (SHIPMETHODID)
);
create or replace TABLE PURCHASING_VENDOR (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	ACCOUNTNUMBER VARCHAR(60),
	NAME VARCHAR(200),
	CREDITRATING NUMBER(38,0),
	PREFERREDVENDORSTATUS BOOLEAN,
	ACTIVEFLAG BOOLEAN,
	PURCHASINGWEBSERVICEURL VARCHAR(4096),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_PURCHASING_VENDOR_PK_VENDOR_BUSINESSENTITYID primary key (BUSINESSENTITYID)
);
create or replace TABLE SALES_COUNTRYREGIONCURRENCY (
	COUNTRYREGIONCODE VARCHAR(12) NOT NULL,
	CURRENCYCODE VARCHAR(12) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_COUNTRYREGIONCURRENCY_PK_COUNTRYREGIONCURRENCY_COUNTRYREGIONCODE_CURRENCYCODE primary key (COUNTRYREGIONCODE, CURRENCYCODE)
);
create or replace TABLE SALES_CREDITCARD (
	CREDITCARDID NUMBER(38,0) NOT NULL,
	CARDTYPE VARCHAR(200),
	CARDNUMBER VARCHAR(100),
	EXPMONTH NUMBER(38,0),
	EXPYEAR NUMBER(38,0),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_CREDITCARD_PK_CREDITCARD_CREDITCARDID primary key (CREDITCARDID)
);
create or replace TABLE SALES_CURRENCY (
	CURRENCYCODE VARCHAR(12) NOT NULL,
	NAME VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_CURRENCY_PK_CURRENCY_CURRENCYCODE primary key (CURRENCYCODE)
);
create or replace TABLE SALES_CURRENCYRATE (
	CURRENCYRATEID NUMBER(38,0) NOT NULL,
	CURRENCYRATEDATE TIMESTAMP_NTZ(3),
	FROMCURRENCYCODE VARCHAR(12),
	TOCURRENCYCODE VARCHAR(12),
	AVERAGERATE NUMBER(19,4),
	ENDOFDAYRATE NUMBER(19,4),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_CURRENCYRATE_PK_CURRENCYRATE_CURRENCYRATEID primary key (CURRENCYRATEID)
);
create or replace TABLE SALES_CUSTOMER (
	CUSTOMERID NUMBER(38,0) NOT NULL,
	PERSONID NUMBER(38,0),
	STOREID NUMBER(38,0),
	TERRITORYID NUMBER(38,0),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_CUSTOMER_PK_CUSTOMER_CUSTOMERID primary key (CUSTOMERID)
);
create or replace TABLE SALES_PERSONCREDITCARD (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	CREDITCARDID NUMBER(38,0) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_PERSONCREDITCARD_PK_PERSONCREDITCARD_BUSINESSENTITYID_CREDITCARDID primary key (BUSINESSENTITYID, CREDITCARDID)
);
create or replace TABLE SALES_SALESORDERDETAIL (
	SALESORDERID NUMBER(38,0) NOT NULL,
	SALESORDERDETAILID NUMBER(38,0) NOT NULL,
	CARRIERTRACKINGNUMBER VARCHAR(100),
	ORDERQTY NUMBER(38,0),
	PRODUCTID NUMBER(38,0),
	SPECIALOFFERID NUMBER(38,0),
	UNITPRICE NUMBER(19,4),
	UNITPRICEDISCOUNT NUMBER(19,4),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESORDERDETAIL_PK_SALESORDERDETAIL_SALESORDERID_SALESORDERDETAILID primary key (SALESORDERDETAILID, SALESORDERID)
);
create or replace TABLE SALES_SALESORDERHEADER (
	SALESORDERID NUMBER(38,0) NOT NULL,
	REVISIONNUMBER NUMBER(38,0),
	ORDERDATE TIMESTAMP_NTZ(3),
	DUEDATE TIMESTAMP_NTZ(3),
	SHIPDATE TIMESTAMP_NTZ(3),
	STATUS NUMBER(38,0),
	ONLINEORDERFLAG BOOLEAN,
	PURCHASEORDERNUMBER VARCHAR(100),
	ACCOUNTNUMBER VARCHAR(60),
	CUSTOMERID NUMBER(38,0),
	SALESPERSONID NUMBER(38,0),
	TERRITORYID NUMBER(38,0),
	BILLTOADDRESSID NUMBER(38,0),
	SHIPTOADDRESSID NUMBER(38,0),
	SHIPMETHODID NUMBER(38,0),
	CREDITCARDID NUMBER(38,0),
	CREDITCARDAPPROVALCODE VARCHAR(15),
	CURRENCYRATEID NUMBER(38,0),
	SUBTOTAL NUMBER(19,4),
	TAXAMT NUMBER(19,4),
	FREIGHT NUMBER(19,4),
	COMMENT VARCHAR(512),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESORDERHEADER_PK_SALESORDERHEADER_SALESORDERID primary key (SALESORDERID)
);
create or replace TABLE SALES_SALESORDERHEADERSALESREASON (
	SALESORDERID NUMBER(38,0) NOT NULL,
	SALESREASONID NUMBER(38,0) NOT NULL,
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESORDERHEADERSALESREASON_PK_SALESORDERHEADERSALESREASON_SALESORDERID_SALESREASONID primary key (SALESORDERID, SALESREASONID)
);
create or replace TABLE SALES_SALESORDERHEADER_LOG (
	OP_XID VARCHAR(100),
	OP_CODE VARCHAR(1),
	OP_CMT_SCN NUMBER(20,0),
	OP_CMT_TIME TIMESTAMP_NTZ(9),
	OP_NUM_IN_TX NUMBER(20,0),
	OP_KEY_LEVEL NUMBER(6,0),
	OP_ROOT_KEY_ROWID VARCHAR(100),
	OPERATION_OWNER VARCHAR(100),
	SALESORDERID_OLD NUMBER(38,0),
	SALESORDERID_NEW NUMBER(38,0),
	REVISIONNUMBER_OLD NUMBER(38,0),
	REVISIONNUMBER_NEW NUMBER(38,0),
	ORDERDATE_OLD TIMESTAMP_NTZ(3),
	ORDERDATE_NEW TIMESTAMP_NTZ(3),
	DUEDATE_OLD TIMESTAMP_NTZ(3),
	DUEDATE_NEW TIMESTAMP_NTZ(3),
	SHIPDATE_OLD TIMESTAMP_NTZ(3),
	SHIPDATE_NEW TIMESTAMP_NTZ(3),
	STATUS_OLD NUMBER(38,0),
	STATUS_NEW NUMBER(38,0),
	ONLINEORDERFLAG_OLD BOOLEAN,
	ONLINEORDERFLAG_NEW BOOLEAN,
	PURCHASEORDERNUMBER_OLD VARCHAR(100),
	PURCHASEORDERNUMBER_NEW VARCHAR(100),
	ACCOUNTNUMBER_OLD VARCHAR(60),
	ACCOUNTNUMBER_NEW VARCHAR(60),
	CUSTOMERID_OLD NUMBER(38,0),
	CUSTOMERID_NEW NUMBER(38,0),
	SALESPERSONID_OLD NUMBER(38,0),
	SALESPERSONID_NEW NUMBER(38,0),
	TERRITORYID_OLD NUMBER(38,0),
	TERRITORYID_NEW NUMBER(38,0),
	BILLTOADDRESSID_OLD NUMBER(38,0),
	BILLTOADDRESSID_NEW NUMBER(38,0),
	SHIPTOADDRESSID_OLD NUMBER(38,0),
	SHIPTOADDRESSID_NEW NUMBER(38,0),
	SHIPMETHODID_OLD NUMBER(38,0),
	SHIPMETHODID_NEW NUMBER(38,0),
	CREDITCARDID_OLD NUMBER(38,0),
	CREDITCARDID_NEW NUMBER(38,0),
	CREDITCARDAPPROVALCODE_OLD VARCHAR(15),
	CREDITCARDAPPROVALCODE_NEW VARCHAR(15),
	CURRENCYRATEID_OLD NUMBER(38,0),
	CURRENCYRATEID_NEW NUMBER(38,0),
	SUBTOTAL_OLD NUMBER(19,4),
	SUBTOTAL_NEW NUMBER(19,4),
	TAXAMT_OLD NUMBER(19,4),
	TAXAMT_NEW NUMBER(19,4),
	FREIGHT_OLD NUMBER(19,4),
	FREIGHT_NEW NUMBER(19,4),
	COMMENT_OLD VARCHAR(512),
	COMMENT_NEW VARCHAR(512),
	ROWGUID_OLD VARCHAR(36),
	ROWGUID_NEW VARCHAR(36),
	MODIFIEDDATE_OLD TIMESTAMP_NTZ(3),
	MODIFIEDDATE_NEW TIMESTAMP_NTZ(3)
);
create or replace TABLE SALES_SALESPERSON (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	TERRITORYID NUMBER(38,0),
	SALESQUOTA NUMBER(19,4),
	BONUS NUMBER(19,4),
	COMMISSIONPCT NUMBER(10,4),
	SALESYTD NUMBER(19,4),
	SALESLASTYEAR NUMBER(19,4),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESPERSON_PK_SALESPERSON_BUSINESSENTITYID primary key (BUSINESSENTITYID)
);
create or replace TABLE SALES_SALESPERSONQUOTAHISTORY (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	QUOTADATE TIMESTAMP_NTZ(3) NOT NULL,
	SALESQUOTA NUMBER(19,4),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESPERSONQUOTAHISTORY_PK_SALESPERSONQUOTAHISTORY_BUSINESSENTITYID_QUOTADATE primary key (BUSINESSENTITYID, QUOTADATE)
);
create or replace TABLE SALES_SALESREASON (
	SALESREASONID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	REASONTYPE VARCHAR(200),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESREASON_PK_SALESREASON_SALESREASONID primary key (SALESREASONID)
);
create or replace TABLE SALES_SALESTAXRATE (
	SALESTAXRATEID NUMBER(38,0) NOT NULL,
	STATEPROVINCEID NUMBER(38,0),
	TAXTYPE NUMBER(38,0),
	TAXRATE NUMBER(10,4),
	NAME VARCHAR(200),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESTAXRATE_PK_SALESTAXRATE_SALESTAXRATEID primary key (SALESTAXRATEID)
);
create or replace TABLE SALES_SALESTERRITORY (
	TERRITORYID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	COUNTRYREGIONCODE VARCHAR(12),
	"GROUP" VARCHAR(200),
	SALESYTD NUMBER(19,4),
	SALESLASTYEAR NUMBER(19,4),
	COSTYTD NUMBER(19,4),
	COSTLASTYEAR NUMBER(19,4),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESTERRITORY_PK_SALESTERRITORY_TERRITORYID primary key (TERRITORYID)
);
create or replace TABLE SALES_SALESTERRITORYHISTORY (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	TERRITORYID NUMBER(38,0) NOT NULL,
	STARTDATE TIMESTAMP_NTZ(3) NOT NULL,
	ENDDATE TIMESTAMP_NTZ(3),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SALESTERRITORYHISTORY_PK_SALESTERRITORYHISTORY_BUSINESSENTITYID_STARTDATE_TERRITORYID primary key (BUSINESSENTITYID, STARTDATE, TERRITORYID)
);
create or replace TABLE SALES_SHOPPINGCARTITEM (
	SHOPPINGCARTITEMID NUMBER(38,0) NOT NULL,
	SHOPPINGCARTID VARCHAR(200),
	QUANTITY NUMBER(38,0),
	PRODUCTID NUMBER(38,0),
	DATECREATED TIMESTAMP_NTZ(3),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SHOPPINGCARTITEM_PK_SHOPPINGCARTITEM_SHOPPINGCARTITEMID primary key (SHOPPINGCARTITEMID)
);
create or replace TABLE SALES_SPECIALOFFER (
	SPECIALOFFERID NUMBER(38,0) NOT NULL,
	DESCRIPTION VARCHAR(1020),
	DISCOUNTPCT NUMBER(10,4),
	TYPE VARCHAR(200),
	CATEGORY VARCHAR(200),
	STARTDATE TIMESTAMP_NTZ(3),
	ENDDATE TIMESTAMP_NTZ(3),
	MINQTY NUMBER(38,0),
	MAXQTY NUMBER(38,0),
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SPECIALOFFER_PK_SPECIALOFFER_SPECIALOFFERID primary key (SPECIALOFFERID)
);
create or replace TABLE SALES_SPECIALOFFERPRODUCT (
	SPECIALOFFERID NUMBER(38,0) NOT NULL,
	PRODUCTID NUMBER(38,0) NOT NULL,
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_SPECIALOFFERPRODUCT_PK_SPECIALOFFERPRODUCT_SPECIALOFFERID_PRODUCTID primary key (PRODUCTID, SPECIALOFFERID)
);
create or replace TABLE SALES_STORE (
	BUSINESSENTITYID NUMBER(38,0) NOT NULL,
	NAME VARCHAR(200),
	SALESPERSONID NUMBER(38,0),
	DEMOGRAPHICS VARCHAR(16777216) COLLATE 'utf8',
	ROWGUID VARCHAR(36),
	MODIFIEDDATE TIMESTAMP_NTZ(3),
	constraint PK_SALES_STORE_PK_STORE_BUSINESSENTITYID primary key (BUSINESSENTITYID)
);
create or replace view ADWKS_SD_PERSON_STAGING(
	BUSINESSENTITYID,
	PERSONTYPE,
	NAMESTYLE,
	TITLE,
	FIRSTNAME,
	MIDDLENAME,
	LASTNAME,
	SUFFIX,
	EMAILPROMOTION,
	ADDITIONALCONTACTINFO,
	DEMOGRAPHICS,
	ROWGUID,
	MODIFIEDDATE,
	SYS_OPERATION_TYPE,
	SYS_OPERATION_TIME,
	SYS_OPERATION_OWNER,
	SYS_TRANSACTION_ID
) as (select
BUSINESSENTITYID::Number BUSINESSENTITYID, 
PERSONTYPE::VARCHAR PERSONTYPE, 
NAMESTYLE::BOOLEAN NAMESTYLE, 
TITLE::VARCHAR TITLE, 
FIRSTNAME::VARCHAR FIRSTNAME, 
MIDDLENAME::VARCHAR MIDDLENAME, 
LASTNAME::VARCHAR LASTNAME, 
SUFFIX::VARCHAR SUFFIX, 
EMAILPROMOTION::Number EMAILPROMOTION, 
ADDITIONALCONTACTINFO::VARCHAR ADDITIONALCONTACTINFO, 
DEMOGRAPHICS::VARCHAR DEMOGRAPHICS, 
ROWGUID::VARCHAR ROWGUID, 
MODIFIEDDATE::TIMESTAMP_NTZ MODIFIEDDATE, 
SYS_OPERATION_TYPE::VARCHAR SYS_OPERATION_TYPE, 
SYS_OPERATION_TIME::TIMESTAMP_NTZ SYS_OPERATION_TIME, 
SYS_OPERATION_OWNER::VARCHAR SYS_OPERATION_OWNER, 
SYS_TRANSACTION_ID::VARCHAR  SYS_TRANSACTION_ID
from PC_INFORMATICA_DB.PUBLIC.ADWKS_SD_PERSON);
create or replace view VIEW_CUSTOMER_SALES(
	PERSONID,
	CUSTOMERID,
	FIRSTNAME,
	LASTNAME,
	TOTAL,
	TOTAL_PURCHASED_VISITS
) as Select  c.PersonID , c.customerid, p.FirstName , p.LastName , sum(soh.TotalDue) as Total, count(*) as Total_Purchased_visits
From VIEW_SALES_CUSTOMER c
inner join VIEW_SD_PERSON p on c.PersonID = p.BusinessEntityID 
inner join VIEW_SALES_SALESORDERHEADER soh on soh.CustomerID = c.CustomerID 
GROUP BY /*ROLLUP*/  c.PersonID, c.customerid, p.FirstName , p.LastName;
create or replace view VIEW_SALES_CUSTOMER(
	HEXID,
	CUSTOMERID,
	PERSONID,
	STOREID,
	TERRITORYID,
	ROWGUID,
	MODIFIEDDATE
) as
SELECT MD5(CUSTOMERID) as HEXID, CUSTOMERID, PERSONID, STOREID, TERRITORYID, ROWGUID, MODIFIEDDATE
FROM PC_INFORMATICA_DB.PUBLIC.SALES_CUSTOMER;
create or replace view VIEW_SALES_SALESORDERHEADER(
	HEXID,
	SALESORDERID,
	REVISIONNUMBER,
	ORDERDATE,
	DUEDATE,
	SHIPDATE,
	STATUS,
	ONLINEORDERFLAG,
	PURCHASEORDERNUMBER,
	ACCOUNTNUMBER,
	CUSTOMERID,
	SALESPERSONID,
	TERRITORYID,
	BILLTOADDRESSID,
	SHIPTOADDRESSID,
	SHIPMETHODID,
	CREDITCARDID,
	CREDITCARDAPPROVALCODE,
	CURRENCYRATEID,
	SUBTOTAL,
	TAXAMT,
	FREIGHT,
	COMMENT,
	ROWGUID,
	MODIFIEDDATE,
	TOTALDUE
) as
SELECT MD5(SALESORDERID) as HEXID, SALESORDERID, REVISIONNUMBER, ORDERDATE, DUEDATE, SHIPDATE, STATUS, ONLINEORDERFLAG, PURCHASEORDERNUMBER, ACCOUNTNUMBER, CUSTOMERID, SALESPERSONID, TERRITORYID, BILLTOADDRESSID, SHIPTOADDRESSID, SHIPMETHODID, CREDITCARDID, CREDITCARDAPPROVALCODE, CURRENCYRATEID, SUBTOTAL, TAXAMT, FREIGHT, COMMENT, ROWGUID, MODIFIEDDATE,
(IFNULL(SubTotal,0) + IFNULL(TaxAmt,0) + IFNULL(Freight,0)) as TotalDue
FROM PC_INFORMATICA_DB.PUBLIC.SALES_SALESORDERHEADER;
create or replace view VIEW_SD_PERSON(
	HEXID,
	RANDOMVAR,
	BUSINESSENTITYID,
	PERSONTYPE,
	NAMESTYLE,
	TITLE,
	FIRSTNAME,
	MIDDLENAME,
	LASTNAME,
	SUFFIX,
	EMAILPROMOTION,
	ADDITIONALCONTACTINFO,
	DEMOGRAPHICS,
	ROWGUID,
	MODIFIEDDATE,
	SYS_OPERATION_TYPE,
	SYS_OPERATION_TIME,
	SYS_OPERATION_OWNER,
	SYS_TRANSACTION_ID
) as
SELECT MD5(src.ROWGUID) as HEXID
    ,  EMAILPROMOTION + 1 as RANDOMVAR,
    BUSINESSENTITYID, PERSONTYPE, NAMESTYLE, TITLE, FIRSTNAME, MIDDLENAME, LASTNAME, SUFFIX, EMAILPROMOTION, ADDITIONALCONTACTINFO, DEMOGRAPHICS, ROWGUID, MODIFIEDDATE, SYS_OPERATION_TYPE, SYS_OPERATION_TIME, SYS_OPERATION_OWNER, SYS_TRANSACTION_ID
    FROM PC_INFORMATICA_DB.PUBLIC.ADWKS_SD_PERSON src;
CREATE OR REPLACE FUNCTION "DUMMY_FUNCTION"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '
    return "This is a dummy function for testing.";
  ';
CREATE OR REPLACE FUNCTION "DUMMY_FUNCTION"("ARG1" VARCHAR(16777216), "ARG2" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '
    return "Arguments received: " + arg1 + " and " + arg2;
  ';
create or replace stream ADWKS_SD_PERSON_STAGING_VIEW_STREAM on view ADWKS_SD_PERSON_STAGING;
create or replace task REFINE_TASK
	schedule='1 minute'
	USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE='XSMALL'
	COMMENT='2.  ELT Process New Transactions in Landing/Staging Table into a more Normalized/Refined Table (flattens JSON payloads)'
	when SYSTEM$STREAM_HAS_DATA('ADWKS_SD_PERSON_STAGING_VIEW_STREAM')
	as MERGE into FINAL_SD_PERSON as tgt USING (select distinct X.* from ADWKS_SD_PERSON_STAGING X inner join ADWKS_SD_PERSON_STAGING_VIEW_STREAM Y on X.BUSINESSENTITYID = Y.BUSINESSENTITYID ) as src
on tgt.ROWGUID = src.ROWGUID
    WHEN MATCHED THEN UPDATE set tgt.BUSINESSENTITYID = src.BUSINESSENTITYID
    , tgt.PERSONTYPE = src.PERSONTYPE
    , tgt.NAMESTYLE = src.NAMESTYLE
    , tgt.TITLE = src.TITLE
    , tgt.FIRSTNAME = src.FIRSTNAME
    , tgt.MIDDLENAME = src.MIDDLENAME
    , tgt.LASTNAME = src.LASTNAME
    , tgt.SUFFIX = src.SUFFIX
    , tgt.EMAILPROMOTION = src.EMAILPROMOTION
    , tgt.ADDITIONALCONTACTINFO = src.ADDITIONALCONTACTINFO
    , tgt.DEMOGRAPHICS = src.DEMOGRAPHICS
    , tgt.MODIFIEDDATE = src.MODIFIEDDATE
    , tgt.SYS_OPERATION_TYPE = src.SYS_OPERATION_TYPE
    , tgt.SYS_OPERATION_TIME = src.SYS_OPERATION_TIME
    , tgt.SYS_OPERATION_OWNER = src.SYS_OPERATION_OWNER
    , tgt.SYS_TRANSACTION_ID = src.SYS_TRANSACTION_ID
    , tgt.HEXID = MD5(src.ROWGUID)
    , tgt.RANDOMVAR = RANDOM()
    WHEN NOT MATCHED THEN INSERT  (HEXID, RANDOMVAR, BUSINESSENTITYID, PERSONTYPE, NAMESTYLE, TITLE, FIRSTNAME, MIDDLENAME, LASTNAME, SUFFIX, EMAILPROMOTION, ADDITIONALCONTACTINFO, DEMOGRAPHICS, ROWGUID, MODIFIEDDATE, SYS_OPERATION_TYPE, SYS_OPERATION_TIME, SYS_OPERATION_OWNER, SYS_TRANSACTION_ID ) values (MD5(src.ROWGUID), RANDOM(), src.BUSINESSENTITYID, src.PERSONTYPE, src.NAMESTYLE, src.TITLE, src.FIRSTNAME, src.MIDDLENAME, src.LASTNAME, src.SUFFIX, src.EMAILPROMOTION, src.ADDITIONALCONTACTINFO, src.DEMOGRAPHICS, src.ROWGUID, src.MODIFIEDDATE, src.SYS_OPERATION_TYPE, src.SYS_OPERATION_TIME, src.SYS_OPERATION_OWNER, src.SYS_TRANSACTION_ID);